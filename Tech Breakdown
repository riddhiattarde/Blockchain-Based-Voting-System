// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    address public owner;
    mapping(address => bool) public hasVoted;
    mapping(string => uint256) public votes;
    string[] public candidates;

    constructor(string[] memory candidateNames) {
        owner = msg.sender;
        candidates = candidateNames;
    }

    function vote(string memory candidate) public {
        require(!hasVoted[msg.sender], "Already voted!");
        require(isValidCandidate(candidate), "Invalid candidate!");

        votes[candidate]++;
        hasVoted[msg.sender] = true;
    }

    function isValidCandidate(string memory candidate) private view returns (bool) {
        for (uint i = 0; i < candidates.length; i++) {
            if (keccak256(abi.encodePacked(candidates[i])) == keccak256(abi.encodePacked(candidate))) {
                return true;
            }
        }
        return false;
    }

    function getVotes(string memory candidate) public view returns (uint256) {
        return votes[candidate];
    }
}
